// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Babatunde50/gitversity-cli/cli (interfaces: Cli)

// Package cli is a generated GoMock package.
package cli

import (
	reflect "reflect"

	gas "github.com/Babatunde50/gitversity-cli/services/gas"
	ggs "github.com/Babatunde50/gitversity-cli/services/ggs"
	gomock "github.com/golang/mock/gomock"
)

// MockCli is a mock of Cli interface.
type MockCli struct {
	ctrl     *gomock.Controller
	recorder *MockCliMockRecorder
}

// MockCliMockRecorder is the mock recorder for MockCli.
type MockCliMockRecorder struct {
	mock *MockCli
}

// NewMockCli creates a new mock instance.
func NewMockCli(ctrl *gomock.Controller) *MockCli {
	mock := &MockCli{ctrl: ctrl}
	mock.recorder = &MockCliMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCli) EXPECT() *MockCliMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockCli) Commit(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockCliMockRecorder) Commit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockCli)(nil).Commit), arg0, arg1)
}

// GetAssignmentByInviteCode mocks base method.
func (m *MockCli) GetAssignmentByInviteCode(arg0 string) (*gas.Assignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssignmentByInviteCode", arg0)
	ret0, _ := ret[0].(*gas.Assignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssignmentByInviteCode indicates an expected call of GetAssignmentByInviteCode.
func (mr *MockCliMockRecorder) GetAssignmentByInviteCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssignmentByInviteCode", reflect.TypeOf((*MockCli)(nil).GetAssignmentByInviteCode), arg0)
}

// GetBlob mocks base method.
func (m *MockCli) GetBlob(arg0 string) (*ggs.GetBlobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlob", arg0)
	ret0, _ := ret[0].(*ggs.GetBlobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlob indicates an expected call of GetBlob.
func (mr *MockCliMockRecorder) GetBlob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlob", reflect.TypeOf((*MockCli)(nil).GetBlob), arg0)
}

// GetCommitFiles mocks base method.
func (m *MockCli) GetCommitFiles(arg0 string) (*ggs.GetCommitFilesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitFiles", arg0)
	ret0, _ := ret[0].(*ggs.GetCommitFilesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitFiles indicates an expected call of GetCommitFiles.
func (mr *MockCliMockRecorder) GetCommitFiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitFiles", reflect.TypeOf((*MockCli)(nil).GetCommitFiles), arg0)
}

// GetRepo mocks base method.
func (m *MockCli) GetRepo(arg0 string) (*ggs.GetRepoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepo", arg0)
	ret0, _ := ret[0].(*ggs.GetRepoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepo indicates an expected call of GetRepo.
func (mr *MockCliMockRecorder) GetRepo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepo", reflect.TypeOf((*MockCli)(nil).GetRepo), arg0)
}

// JoinAssignment mocks base method.
func (m *MockCli) JoinAssignment(arg0 string) (*gas.JoinAssignmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinAssignment", arg0)
	ret0, _ := ret[0].(*gas.JoinAssignmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinAssignment indicates an expected call of JoinAssignment.
func (mr *MockCliMockRecorder) JoinAssignment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinAssignment", reflect.TypeOf((*MockCli)(nil).JoinAssignment), arg0)
}

// Login mocks base method.
func (m *MockCli) Login(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockCliMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockCli)(nil).Login), arg0, arg1)
}

// SignUp mocks base method.
func (m *MockCli) SignUp(arg0, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockCliMockRecorder) SignUp(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockCli)(nil).SignUp), arg0, arg1, arg2, arg3)
}

// Stage mocks base method.
func (m *MockCli) Stage(arg0 string, arg1 []*ggs.AppFile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stage indicates an expected call of Stage.
func (mr *MockCliMockRecorder) Stage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stage", reflect.TypeOf((*MockCli)(nil).Stage), arg0, arg1)
}

// UnStage mocks base method.
func (m *MockCli) UnStage(arg0 string, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnStage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnStage indicates an expected call of UnStage.
func (mr *MockCliMockRecorder) UnStage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnStage", reflect.TypeOf((*MockCli)(nil).UnStage), arg0, arg1)
}
