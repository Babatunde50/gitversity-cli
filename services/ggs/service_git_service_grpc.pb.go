// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: service_git_service.proto

package ggs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GitService_CreateRepo_FullMethodName      = "/ggs.GitService/CreateRepo"
	GitService_GetBlob_FullMethodName         = "/ggs.GitService/GetBlob"
	GitService_StageToRepo_FullMethodName     = "/ggs.GitService/StageToRepo"
	GitService_UnstageFromRepo_FullMethodName = "/ggs.GitService/UnstageFromRepo"
	GitService_CommitToRepo_FullMethodName    = "/ggs.GitService/CommitToRepo"
	GitService_ListBranches_FullMethodName    = "/ggs.GitService/ListBranches"
	GitService_DeleteBranch_FullMethodName    = "/ggs.GitService/DeleteBranch"
	GitService_CreateBranch_FullMethodName    = "/ggs.GitService/CreateBranch"
	GitService_CheckoutBranch_FullMethodName  = "/ggs.GitService/CheckoutBranch"
	GitService_GetRepo_FullMethodName         = "/ggs.GitService/GetRepo"
	GitService_GetCommitFiles_FullMethodName  = "/ggs.GitService/GetCommitFiles"
	GitService_CloneRepo_FullMethodName       = "/ggs.GitService/CloneRepo"
)

// GitServiceClient is the client API for GitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitServiceClient interface {
	CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*CreateRepoResponse, error)
	GetBlob(ctx context.Context, in *GetBlobRequest, opts ...grpc.CallOption) (*GetBlobResponse, error)
	StageToRepo(ctx context.Context, in *StageToRepoRequest, opts ...grpc.CallOption) (*StageToRepoResponse, error)
	UnstageFromRepo(ctx context.Context, in *UnstageFromRepoRequest, opts ...grpc.CallOption) (*UnstageFromRepoResponse, error)
	CommitToRepo(ctx context.Context, in *CommitToRepoRequest, opts ...grpc.CallOption) (*CommitToRepoResponse, error)
	ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...grpc.CallOption) (*ListBranchesResponse, error)
	DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*DeleteBranchResponse, error)
	CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*CreateBranchResponse, error)
	CheckoutBranch(ctx context.Context, in *CheckoutBranchRequest, opts ...grpc.CallOption) (*CheckoutBranchResponse, error)
	GetRepo(ctx context.Context, in *GetRepoRequest, opts ...grpc.CallOption) (*GetRepoResponse, error)
	GetCommitFiles(ctx context.Context, in *GetCommitFilesRequest, opts ...grpc.CallOption) (*GetCommitFilesResponse, error)
	CloneRepo(ctx context.Context, in *CloneRepoRequest, opts ...grpc.CallOption) (*CloneRepoResponse, error)
}

type gitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGitServiceClient(cc grpc.ClientConnInterface) GitServiceClient {
	return &gitServiceClient{cc}
}

func (c *gitServiceClient) CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*CreateRepoResponse, error) {
	out := new(CreateRepoResponse)
	err := c.cc.Invoke(ctx, GitService_CreateRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) GetBlob(ctx context.Context, in *GetBlobRequest, opts ...grpc.CallOption) (*GetBlobResponse, error) {
	out := new(GetBlobResponse)
	err := c.cc.Invoke(ctx, GitService_GetBlob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) StageToRepo(ctx context.Context, in *StageToRepoRequest, opts ...grpc.CallOption) (*StageToRepoResponse, error) {
	out := new(StageToRepoResponse)
	err := c.cc.Invoke(ctx, GitService_StageToRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) UnstageFromRepo(ctx context.Context, in *UnstageFromRepoRequest, opts ...grpc.CallOption) (*UnstageFromRepoResponse, error) {
	out := new(UnstageFromRepoResponse)
	err := c.cc.Invoke(ctx, GitService_UnstageFromRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) CommitToRepo(ctx context.Context, in *CommitToRepoRequest, opts ...grpc.CallOption) (*CommitToRepoResponse, error) {
	out := new(CommitToRepoResponse)
	err := c.cc.Invoke(ctx, GitService_CommitToRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...grpc.CallOption) (*ListBranchesResponse, error) {
	out := new(ListBranchesResponse)
	err := c.cc.Invoke(ctx, GitService_ListBranches_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*DeleteBranchResponse, error) {
	out := new(DeleteBranchResponse)
	err := c.cc.Invoke(ctx, GitService_DeleteBranch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*CreateBranchResponse, error) {
	out := new(CreateBranchResponse)
	err := c.cc.Invoke(ctx, GitService_CreateBranch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) CheckoutBranch(ctx context.Context, in *CheckoutBranchRequest, opts ...grpc.CallOption) (*CheckoutBranchResponse, error) {
	out := new(CheckoutBranchResponse)
	err := c.cc.Invoke(ctx, GitService_CheckoutBranch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) GetRepo(ctx context.Context, in *GetRepoRequest, opts ...grpc.CallOption) (*GetRepoResponse, error) {
	out := new(GetRepoResponse)
	err := c.cc.Invoke(ctx, GitService_GetRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) GetCommitFiles(ctx context.Context, in *GetCommitFilesRequest, opts ...grpc.CallOption) (*GetCommitFilesResponse, error) {
	out := new(GetCommitFilesResponse)
	err := c.cc.Invoke(ctx, GitService_GetCommitFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) CloneRepo(ctx context.Context, in *CloneRepoRequest, opts ...grpc.CallOption) (*CloneRepoResponse, error) {
	out := new(CloneRepoResponse)
	err := c.cc.Invoke(ctx, GitService_CloneRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitServiceServer is the server API for GitService service.
// All implementations should embed UnimplementedGitServiceServer
// for forward compatibility
type GitServiceServer interface {
	CreateRepo(context.Context, *CreateRepoRequest) (*CreateRepoResponse, error)
	GetBlob(context.Context, *GetBlobRequest) (*GetBlobResponse, error)
	StageToRepo(context.Context, *StageToRepoRequest) (*StageToRepoResponse, error)
	UnstageFromRepo(context.Context, *UnstageFromRepoRequest) (*UnstageFromRepoResponse, error)
	CommitToRepo(context.Context, *CommitToRepoRequest) (*CommitToRepoResponse, error)
	ListBranches(context.Context, *ListBranchesRequest) (*ListBranchesResponse, error)
	DeleteBranch(context.Context, *DeleteBranchRequest) (*DeleteBranchResponse, error)
	CreateBranch(context.Context, *CreateBranchRequest) (*CreateBranchResponse, error)
	CheckoutBranch(context.Context, *CheckoutBranchRequest) (*CheckoutBranchResponse, error)
	GetRepo(context.Context, *GetRepoRequest) (*GetRepoResponse, error)
	GetCommitFiles(context.Context, *GetCommitFilesRequest) (*GetCommitFilesResponse, error)
	CloneRepo(context.Context, *CloneRepoRequest) (*CloneRepoResponse, error)
}

// UnimplementedGitServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGitServiceServer struct {
}

func (UnimplementedGitServiceServer) CreateRepo(context.Context, *CreateRepoRequest) (*CreateRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepo not implemented")
}
func (UnimplementedGitServiceServer) GetBlob(context.Context, *GetBlobRequest) (*GetBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlob not implemented")
}
func (UnimplementedGitServiceServer) StageToRepo(context.Context, *StageToRepoRequest) (*StageToRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StageToRepo not implemented")
}
func (UnimplementedGitServiceServer) UnstageFromRepo(context.Context, *UnstageFromRepoRequest) (*UnstageFromRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnstageFromRepo not implemented")
}
func (UnimplementedGitServiceServer) CommitToRepo(context.Context, *CommitToRepoRequest) (*CommitToRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitToRepo not implemented")
}
func (UnimplementedGitServiceServer) ListBranches(context.Context, *ListBranchesRequest) (*ListBranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBranches not implemented")
}
func (UnimplementedGitServiceServer) DeleteBranch(context.Context, *DeleteBranchRequest) (*DeleteBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBranch not implemented")
}
func (UnimplementedGitServiceServer) CreateBranch(context.Context, *CreateBranchRequest) (*CreateBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBranch not implemented")
}
func (UnimplementedGitServiceServer) CheckoutBranch(context.Context, *CheckoutBranchRequest) (*CheckoutBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckoutBranch not implemented")
}
func (UnimplementedGitServiceServer) GetRepo(context.Context, *GetRepoRequest) (*GetRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepo not implemented")
}
func (UnimplementedGitServiceServer) GetCommitFiles(context.Context, *GetCommitFilesRequest) (*GetCommitFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommitFiles not implemented")
}
func (UnimplementedGitServiceServer) CloneRepo(context.Context, *CloneRepoRequest) (*CloneRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneRepo not implemented")
}

// UnsafeGitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitServiceServer will
// result in compilation errors.
type UnsafeGitServiceServer interface {
	mustEmbedUnimplementedGitServiceServer()
}

func RegisterGitServiceServer(s grpc.ServiceRegistrar, srv GitServiceServer) {
	s.RegisterService(&GitService_ServiceDesc, srv)
}

func _GitService_CreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).CreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitService_CreateRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).CreateRepo(ctx, req.(*CreateRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_GetBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).GetBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitService_GetBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).GetBlob(ctx, req.(*GetBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_StageToRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StageToRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).StageToRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitService_StageToRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).StageToRepo(ctx, req.(*StageToRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_UnstageFromRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnstageFromRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).UnstageFromRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitService_UnstageFromRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).UnstageFromRepo(ctx, req.(*UnstageFromRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_CommitToRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitToRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).CommitToRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitService_CommitToRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).CommitToRepo(ctx, req.(*CommitToRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_ListBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).ListBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitService_ListBranches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).ListBranches(ctx, req.(*ListBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_DeleteBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).DeleteBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitService_DeleteBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).DeleteBranch(ctx, req.(*DeleteBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_CreateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).CreateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitService_CreateBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).CreateBranch(ctx, req.(*CreateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_CheckoutBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckoutBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).CheckoutBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitService_CheckoutBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).CheckoutBranch(ctx, req.(*CheckoutBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_GetRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).GetRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitService_GetRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).GetRepo(ctx, req.(*GetRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_GetCommitFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).GetCommitFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitService_GetCommitFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).GetCommitFiles(ctx, req.(*GetCommitFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_CloneRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).CloneRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitService_CloneRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).CloneRepo(ctx, req.(*CloneRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GitService_ServiceDesc is the grpc.ServiceDesc for GitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ggs.GitService",
	HandlerType: (*GitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRepo",
			Handler:    _GitService_CreateRepo_Handler,
		},
		{
			MethodName: "GetBlob",
			Handler:    _GitService_GetBlob_Handler,
		},
		{
			MethodName: "StageToRepo",
			Handler:    _GitService_StageToRepo_Handler,
		},
		{
			MethodName: "UnstageFromRepo",
			Handler:    _GitService_UnstageFromRepo_Handler,
		},
		{
			MethodName: "CommitToRepo",
			Handler:    _GitService_CommitToRepo_Handler,
		},
		{
			MethodName: "ListBranches",
			Handler:    _GitService_ListBranches_Handler,
		},
		{
			MethodName: "DeleteBranch",
			Handler:    _GitService_DeleteBranch_Handler,
		},
		{
			MethodName: "CreateBranch",
			Handler:    _GitService_CreateBranch_Handler,
		},
		{
			MethodName: "CheckoutBranch",
			Handler:    _GitService_CheckoutBranch_Handler,
		},
		{
			MethodName: "GetRepo",
			Handler:    _GitService_GetRepo_Handler,
		},
		{
			MethodName: "GetCommitFiles",
			Handler:    _GitService_GetCommitFiles_Handler,
		},
		{
			MethodName: "CloneRepo",
			Handler:    _GitService_CloneRepo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_git_service.proto",
}
